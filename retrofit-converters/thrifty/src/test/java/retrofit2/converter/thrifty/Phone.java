// Automatically generated by the Thrifty compiler version 0.4.2
// Options: --use-java-style-names
// Source file: phone.thrift
package retrofit2.converter.thrifty;

import com.microsoft.thrifty.Adapter;
import com.microsoft.thrifty.Struct;
import com.microsoft.thrifty.StructBuilder;
import com.microsoft.thrifty.TType;
import com.microsoft.thrifty.ThriftField;
import com.microsoft.thrifty.protocol.FieldMetadata;
import com.microsoft.thrifty.protocol.Protocol;
import com.microsoft.thrifty.util.ProtocolUtil;
import java.io.IOException;

public final class Phone implements Struct {
  public static final Adapter<Phone, Builder> ADAPTER = new PhoneAdapter();

  @ThriftField(
      fieldId = 1,
      isOptional = true
  )
  public final String number;

  @ThriftField(
      fieldId = 2,
      isOptional = true
  )
  public final Boolean voicemail;

  private Phone(Builder builder) {
    this.number = builder.number;
    this.voicemail = builder.voicemail;
  }

  @Override
  @SuppressWarnings("StringEquality")
  public boolean equals(Object other) {
    if (this == other) return true;
    if (other == null) return false;
    if (!(other instanceof Phone)) return false;
    Phone that = (Phone) other;
    return (this.number == that.number || (this.number != null && this.number.equals(that.number)))
        && (this.voicemail == that.voicemail || (this.voicemail != null && this.voicemail.equals(that.voicemail)));
  }

  @Override
  public int hashCode() {
    int code = 16777619;
    code ^= (this.number == null) ? 0 : this.number.hashCode();
    code *= 0x811c9dc5;
    code ^= (this.voicemail == null) ? 0 : this.voicemail.hashCode();
    code *= 0x811c9dc5;
    return code;
  }

  @Override
  public String toString() {
    return "Phone{number=" + this.number + ", voicemail=" + this.voicemail + "}";
  }

  @Override
  public void write(Protocol protocol) throws IOException {
    ADAPTER.write(protocol, this);
  }

  public static final class Builder implements StructBuilder<Phone> {
    private String number;

    private Boolean voicemail;

    public Builder() {
    }

    public Builder(Phone struct) {
      this.number = struct.number;
      this.voicemail = struct.voicemail;
    }

    public Builder number(String number) {
      this.number = number;
      return this;
    }

    public Builder voicemail(Boolean voicemail) {
      this.voicemail = voicemail;
      return this;
    }

    @Override
    public Phone build() {
      return new Phone(this);
    }

    @Override
    public void reset() {
      this.number = null;
      this.voicemail = null;
    }
  }

  private static final class PhoneAdapter implements Adapter<Phone, Builder> {
    @Override
    public void write(Protocol protocol, Phone struct) throws IOException {
      protocol.writeStructBegin("Phone");
      if (struct.number != null) {
        protocol.writeFieldBegin("number", 1, TType.STRING);
        protocol.writeString(struct.number);
        protocol.writeFieldEnd();
      }
      if (struct.voicemail != null) {
        protocol.writeFieldBegin("voicemail", 2, TType.BOOL);
        protocol.writeBool(struct.voicemail);
        protocol.writeFieldEnd();
      }
      protocol.writeFieldStop();
      protocol.writeStructEnd();
    }

    @Override
    public Phone read(Protocol protocol, Builder builder) throws IOException {
      protocol.readStructBegin();
      while (true) {
        FieldMetadata field = protocol.readFieldBegin();
        if (field.typeId == TType.STOP) {
          break;
        }
        switch (field.fieldId) {
          case 1: {
            if (field.typeId == TType.STRING) {
              String value = protocol.readString();
              builder.number(value);
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          case 2: {
            if (field.typeId == TType.BOOL) {
              boolean value = protocol.readBool();
              builder.voicemail(value);
            } else {
              ProtocolUtil.skip(protocol, field.typeId);
            }
          }
          break;
          default: {
            ProtocolUtil.skip(protocol, field.typeId);
          }
          break;
        }
        protocol.readFieldEnd();
      }
      protocol.readStructEnd();
      return builder.build();
    }

    @Override
    public Phone read(Protocol protocol) throws IOException {
      return read(protocol, new Builder());
    }
  }
}
