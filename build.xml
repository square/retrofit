<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2010 Square, Inc. -->

<!--
  - Builds the Retrofit project, relying on Apache Ivy to download external
  - dependencies.
  -
  - Retrofit is divided into modules, all of which are built from this single
  - Ant buildfile. The directory structure is as follows:
  -
  -  [project root]
  -    modules
  -      [module]
  -        src
  -        src-tests
  -->
<project
    xmlns:ivy="antlib:org.apache.ivy.ant"
    name="Retrofit" basedir="." default="dist">

  <!--
    - The Retrofit version number, becomes part of the JAR file names.
    -->
  <property file="revision.properties"/>

  <!-- Import boilerplate Ivy build steps. -->
  <import file="ivy-build.xml"/>

  <property name="build.dir" location="build"/>
  <property name="lib.dir" location="lib"/>

  <property name="testreports.dir" location="${build.dir}/testreports"/>

  <target name="prepare" depends="init-ivy">
    <tstamp>
      <!-- ISO 8601 format: 2010-06-02T15:25:45Z -->
      <format property="build.time" timezone="GMT"
              pattern="yyyy-MM-dd'T'HH:mm:ss'Z'"/>
      <format property="build.year" timezone="GMT"
              pattern="yyyy"/>
    </tstamp>

    <!--
      - Assigns the git commit hash to the 'commit.hash' property, sending
      - errors to the Ant log.
      -->
    <exec executable="git"
          outputproperty="commit.hash"
          failifexecutionfails="false"
          logerror="true">
      <arg value="log"/>
      <arg value="-n1"/>
      <arg value="--pretty=format:%H"/>
    </exec>

    <!-- Downloads dependencies and places JARs under lib. -->
    <ivy:retrieve/>
  </target>

  <target name="clean">
    <delete dir="${build.dir}"/>
  </target>

  <target name="clean-libs" depends="clean"
          description="Removes the 'lib' directory.">
    <delete dir="${lib.dir}"/>
  </target>

  <import file="build-macros.xml"/>

  <target name="repackage-gson" depends="prepare">
    <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask">
      <classpath>
        <fileset dir="lib" includes="jarjar*.jar"/>
      </classpath>
    </taskdef>
    <jarjar jarfile="${build.dir}/retrofit-gson-1.6.jar">
      <zipfileset src="lib/gson-1.6.jar"/>
      <rule pattern="com.google.gson.**" result="retrofit.internal.gson.@1"/>
    </jarjar>
    <jarjar jarfile="${build.dir}/retrofit-gson-1.6-sources.jar">
      <zipfileset src="lib/gson-1.6-sources.jar"/>
      <rule pattern="com.google.gson.**" result="retrofit.internal.gson.@1"/>
    </jarjar>
  </target>

  <target name="compile" depends="repackage-gson">
    <!-- Build these in this particular order. -->
    <compile.module module="core"/>

    <compile.module module="io">
      <compile.main.classpath>
        <pathelement location="${build.dir}/core/main"/>
      </compile.main.classpath>
    </compile.module>

    <compile.module module="http">
      <compile.main.classpath>
        <pathelement location="${build.dir}/core/main"/>
        <pathelement location="${build.dir}/io/main"/>
	      <pathelement location="${build.dir}/retrofit-gson-1.6.jar"/>
      </compile.main.classpath>
      <compile.tests.classpath>
        <pathelement location="${build.dir}/core/main"/>
        <pathelement location="${build.dir}/io/main"/>
        <pathelement location="${build.dir}/retrofit-gson-1.6.jar"/>
      </compile.tests.classpath>
    </compile.module>

    <compile.module module="android"/>
  </target>

  <target name="jar" depends="compile">
    <jar.module module="android"/>
    <jar.module module="core"/>
    <jar.module module="http"/>
    <jar.module module="io"/>
  </target>

  <target name="require.tests"
          description="Sets a property so test failures abort the build.">
    <property name="require.tests" value="true"/>
  </target>

  <target name="test" depends="compile" description="Runs tests.">
    <mkdir dir="${testreports.dir}"/>

    <!--
      - If this property isn't already set, assume broken tests should not
      - abort the build.
      -->
    <property name="require.tests" value="false"/>

    <junit printsummary="true" haltonfailure="${require.tests}">
      <classpath>
        <pathelement location="${build.dir}/android/main"/>
        <pathelement location="${build.dir}/android/tests"/>
        <pathelement location="${build.dir}/core/main"/>
        <pathelement location="${build.dir}/core/tests"/>
        <pathelement location="${build.dir}/http/main"/>
        <pathelement location="${build.dir}/http/tests"/>
        <pathelement location="${build.dir}/io/main"/>
        <pathelement location="${build.dir}/io/tests"/>
        <fileset dir="${build.dir}" includes="retrofit-gson*.jar"/>
        <fileset dir="${lib.dir}" includes="*.jar"/>
      </classpath>

      <formatter type="xml"/>

      <batchtest todir="${testreports.dir}">
        <fileset dir="modules/android/src-tests">
          <include name="**/*Test.java"/>
        </fileset>
        <fileset dir="modules/core/src-tests">
          <include name="**/*Test.java"/>
        </fileset>
        <fileset dir="modules/io/src-tests">
          <include name="**/*Test.java"/>
        </fileset>
        <fileset dir="modules/http/src-tests">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>

    <junitreport todir="${testreports.dir}">
      <fileset dir="${testreports.dir}" includes="TEST-*.xml"/>

      <report todir="${testreports.dir}"/>
    </junitreport>

    <echo
        message="${line.separator}Test report written to:${line.separator}${testreports.dir}/index.html"/>
  </target>

  <!--
    - Publishes to the Ivy repository using the resolver named
    - 'retrofit-resolver'.
    -->
  <target name="publish" depends="dist">
    <ivy:publish
        pubrevision="${retrofit.revision}"
        resolver="retrofit-resolver"
        forcedeliver="true"
        update="true"
        overwrite="true"
        publishivy="true">
      <!--
        - This pattern selects which files will be published. The artifact
        - pattern in ivy-settings.xml controls how the names matched here are
        - published in the Ivy repository.
        -->
      <artifacts pattern="${build.dir}/[artifact]-[revision](-[classifier]).[ext]"/>
    </ivy:publish>
  </target>

  <target name="dist" depends="clean,require.tests,test,jar"
          description="Compiles, ensures tests pass, and creates all deliverables.">
    <zip zipfile="${build.dir}/retrofit-${retrofit.revision}.zip">
      <zipfileset prefix="retrofit" dir=".">
        <exclude name="build/**"/>
        <exclude name="out/**"/>
        <exclude name="lib/**"/>
        <exclude name="**/.git/**"/>
        <exclude name=".gitignore"/>
        <exclude name=".idea/**"/>
        <exclude name="*.iml"/>
      </zipfileset>
      <zipfileset prefix="retrofit/bin" dir="${build.dir}">
        <include name="retrofit-*.jar"/>
      </zipfileset>
    </zip>
  </target>
</project>

